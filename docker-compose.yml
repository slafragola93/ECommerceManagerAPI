version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ecommerce_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ECommerce API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce_api
    ports:
      - "8000:8000"
    environment:
      # Database (Laragon MySQL)
      DATABASE_MAIN_ADDRESS: host.docker.internal
      DATABASE_MAIN_PORT: 3306
      DATABASE_MAIN_NAME: ${DATABASE_MAIN_NAME}
      DATABASE_MAIN_USER: ${DATABASE_MAIN_USER}
      DATABASE_MAIN_PASSWORD: ${DATABASE_MAIN_PASSWORD}
      
      # Redis Cache
      REDIS_URL: redis://redis:6379/0
      CACHE_ENABLED: ${CACHE_ENABLED:-true}
      CACHE_BACKEND: ${CACHE_BACKEND:-hybrid}
      
      # Cache Configuration
      CACHE_DEFAULT_TTL: ${CACHE_DEFAULT_TTL:-300}
      CACHE_STALE_TTL: ${CACHE_STALE_TTL:-900}
      CACHE_MAX_MEM_ITEMS: ${CACHE_MAX_MEM_ITEMS:-1000}
      
      # Cache Feature Flags
      CACHE_ORDERS_ENABLED: ${CACHE_ORDERS_ENABLED:-true}
      CACHE_PRODUCTS_ENABLED: ${CACHE_PRODUCTS_ENABLED:-true}
      CACHE_CUSTOMERS_ENABLED: ${CACHE_CUSTOMERS_ENABLED:-true}
      CACHE_EXTERNAL_APIS_ENABLED: ${CACHE_EXTERNAL_APIS_ENABLED:-true}
      
      # Security
      CACHE_KEY_SALT: ${CACHE_KEY_SALT:-ecommerce-cache-salt}
      SECRET_KEY: ${SECRET_KEY}
      
      # Metrics
      CACHE_METRICS_ENABLED: ${CACHE_METRICS_ENABLED:-true}
      CACHE_LOG_LEVEL: ${CACHE_LOG_LEVEL:-INFO}
      
      # Application
      MAX_LIMIT: ${MAX_LIMIT:-1000}
      LIMIT_DEFAULT: ${LIMIT_DEFAULT:-100}
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    networks:
      - ecommerce_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander (Cache Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce_redis_commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    networks:
      - ecommerce_network
    depends_on:
      - redis
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecommerce_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
